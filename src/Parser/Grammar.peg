<?php

namespace Smuuf\Primi\Parser;

use \hafriedlander\Peg\Parser;

class CompiledParser extends Parser\Packrat {

	// Add these properties so PHPStan doesn't complain about undefined properties.

	/** @var int */
	public $pos;

	/** @var string */
	public $string;

	private const RESERVED_WORDS = [
		'false', 'true', 'null', 'if', 'else', 'return', 'for', 'and', 'or',
		'function', 'break', 'continue', 'while', 'try', 'catch', 'not', 'in'
	];

	/**
	 * Prevent parsing variable name which has the same name as some reserved
	 * word.
	 * Setting result to false will tell the parser that is should try other
	 * parser rules.
	 */
	protected function Mutable__finalise(&$result) {
		if (\in_array($result['text'], self::RESERVED_WORDS, \true)) {
			$result = \false;
		}
	}

/*!* Primi

# Previous StringLiteral regex causing PREG_JIT_STACKLIMIT_ERROR
# StringLiteral: /"(.|\n)*?"|'(.|\n)*?'/

# Carefully crafted (or stolen somewhere?) string matching regex which supports
# both " and ' quotes, doesn't cause JIT stack overflow and also supports escaped quotes.
StringLiteral: / ("[^"\\]*(\\.[^"\\]*)*")|('[^'\\]*(\\.[^'\\]*)*') /s
NumberLiteral: / -?\d[\d_]*(\.[\d_]+)? /
# Literals for true|false must NOT be followed by any possible characters representing variable name.
BoolLiteral: ( "true" | "false" ) !VariableName
# Literal for null must NOT be followed by any possible characters representing variable name.
NullLiteral: "null" !VariableName
RegexLiteral: "rx" core:StringLiteral
Nothing: ""

Literal: skip:NumberLiteral | skip:StringLiteral | skip:BoolLiteral | skip:NullLiteral | skip:RegexLiteral
VariableName: / (?:[a-zA-Z_][a-zA-Z0-9_]*) /
Variable: core:VariableName
AnonymousFunction: "function" __ "(" __ params:FunctionDefinitionArgumentList? __ ")" __ body:Block | "(" __ params:FunctionDefinitionArgumentList? __ ")" __ "=>" __ body:Block

DictItem: __ key:Expression __ ":" __ value:Expression __
DictDefinition: "{" __ ( items:DictItem ( __ "," __ items:DictItem )* )? __ ( "," __ )? "}"
ListDefinition: "[" __ ( items:Expression ( __ "," __ items:Expression )* )? __ ( "," __ )? "]"

AbstractValue: skip:Literal | skip:Variable | skip:ListDefinition | skip:DictDefinition
VariableVector: core:Variable vector:Vector
Vector: ( "[" __ ( index:Expression | index:Nothing ) __ "]" ) vector:Vector?
Mutable: skip:VariableVector | skip:VariableName

AddOperator: "+" | "-"
MultiplyOperator: "*" | "/"
PowerOperator: "**"
AssignmentOperator: "="
#  These comparison operators don't have to be surrounded by whitespace: Eg. '1+inside' is valid
ComparisonOperator: "==" | "!=" | ">=" | "<=" | ">" | "<"
#  These comparison operators must be surrounded by whitespace: Eg. '1ininside' is not valid.
ComparisonOperatorWithWhitespace: "in"  | "not in"
AndOperator: "and"
OrOperator: "or"
NegationOperator: "!"

Expression: skip:AnonymousFunction | skip:Assignment | skip:CondExpr
Assignment: left:Mutable __ AssignmentOperator __ right:Expression

# The order of how these rules are nested is very important, as it defines
# their priority. We also need that they all are left-associative.
CondExpr: true:LogicalOr ( ] "if" __ "(" __ cond:Expression __ ")" __ "else" ] false:LogicalOr )?
LogicalOr: operands:LogicalAnd ( ] ops:OrOperator ] operands:LogicalAnd )*
LogicalAnd: operands:Comparison ( ] ops:AndOperator ] operands:Comparison )*
Comparison: operands:Addition ( ( __ ops:ComparisonOperator __ | ops: ] ComparisonOperatorWithWhitespace ] ) operands:Addition )*
Addition: operands:Multiplication ( __ ops:AddOperator __ operands:Multiplication )*
Multiplication: operands:Exponentiation ( __ ops:MultiplyOperator __ operands:Exponentiation )*
Exponentiation: operands:Negation ( __ ops:PowerOperator __ operands:Negation )*
Negation: ( nots:NegationOperator )* core:Operand
Operand: ( ( "(" __ core:Expression __ ")" | core:AbstractValue ) chain:Chain? ) | skip:AbstractValue

Chain: &/[\[\(\.]/ ( core:Dereference | core:Invocation | core:ChainedFunction ) chain:Chain?
Dereference: "[" __ key:Expression __ "]"
Invocation: "(" __ args:ArgumentList? __ ")"
ChainedFunction: "." fn:Variable invo:Invocation

ArgumentList: args:Expression ( __ "," __ args:Expression )*

FunctionDefinitionArgumentList: skip:VariableName ( __ "," __ skip:VariableName )*
FunctionDefinition: "function" [ function:VariableName __ "(" __ params:FunctionDefinitionArgumentList? __ ")" __ body:Block

IfStatement: "if" __ "(" __ left:Expression __ ")" __ ( right:Block ) ( __ "else" __ ( else:Block ) )?
ForStatement: "for" __ "(" __ ( key:VariableName __ ":" __ )? item:VariableName __ "in" __ left:Expression __ ")" __ ( right:Block )
WhileStatement: "while" __ "(" __ left:Expression __ ")" __ ( right:Block )
TryStatement: "try" __ main:Block __ "catch" __ onerror:Block
# &/[rbc]/ - Don't even try any of the subrules if this doesn't start with expected letters.
CommandStatements: &/[rbc]/ ( skip:ReturnStatement | skip:BreakStatement | skip:ContinueStatement )
# &SEP in the second branch matches a 'return' followed by separator, without consuming the
# separator - which is needed for the Program rule to finish parsing properly.
ReturnStatement: ( "return" [ ( subject:Expression )? ) | ( "return" &SEP )
BreakStatement: "break"
ContinueStatement: "continue"

# &/[iwft]/ - No sub-rules will be even tried if the string does not start with a expected letter.
BlockStatements: &/[iwft]/ ( skip:IfStatement | skip:WhileStatement | skip:FunctionDefinition | skip:ForStatement | skip:TryStatement)

# !/[\s\};]/ Ensures that we won't try to match further if any of those symbols are at the beginning of the substring we're matching.
Statement: !/[\s\};]/ ( skip:BlockStatements | skip:CommandStatements | skip:Expression )
Block: "{" __ ( skip:Program )? "}"

# Matches any optional whitespace or newline.
__: / [\s]*+(?:\/\/[^\n]*+(?:\s*+))? /

# Matches newline, takes care of optional // comments at EOL.
NL: / (?:\/\/[^\n]*)?\n /

# Statement separator: Newline or semicolon.
SEP: ";" | NL

# "!/$/" Ensures we won't try to find statements at EOF.
Program: ( __ stmts:Statement? > SEP )* __

*/

}
