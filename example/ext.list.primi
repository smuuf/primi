//
// List extension functions.
//

//
// list_get()
//

['a', 'b', 'c'].get(0) == 'a'
['a', 'b', 'c'].get(1) == 'b'
['a', 'b', 'c'].get(2) == 'c'
['a', 'b', 'c'].get(3) == null
['a', 'b', 'c'].get(3, 'NOT FOUND') == 'NOT FOUND'

 // Using negative index.
['a', 'b', 'c'].get(-1) == 'c'
['a', 'b', 'c'].get(-2) == 'b'
['a', 'b', 'c'].get(-3) == 'a'
['a', 'b', 'c'].get(-4) == null
['a', 'b', 'c'].get(-4, 'NOT FOUND') == 'NOT FOUND'


//
// list_push()
//

a_list = ['a', 'b', 'c']
a_list.push({'some_key': 'some_value'})
assert(a_list == ['a', 'b', 'c', {'some_key': 'some_value'}])

//
// list_prepend()
//

a_list = ['a', 'b', 'c']
a_list.prepend({'some_key': 'some_value'})
assert(a_list == [{'some_key': 'some_value'}, 'a', 'b', 'c'])

//
// list_pop()
//

a_list = [1, 2, 3, 4, 5]
assert(a_list.pop() == 5)
assert(a_list.pop(1) == 2)
assert(a_list.pop(-3) == 1)

//
// list_copy()
//

a = [1, "x", []]

b = a
b[0] = "bee"
assert(a[0] == "bee")

c = a.copy()
c[0] = "cow"
assert(a[0] != "cow")

//
// list_reverse()
//

assert([1, 2, 3].reverse() == [3, 2, 1])

//
// list_random()
//

r = [1, 2, 3].random()
assert(r == 1 or r == 2 or r ==3)

//
// list_count()
//

assert([1, 2, 3, 1].count(1) == 2)
assert([1, 2, 3, 1].count(2) == 1)
assert([1, 2, 3, 1].count(666) == 0)

_ = 'Lists with same items with different order are different.'
assert([[1, 2], [2, 1]].count([1, 2]) == 1, _)

_ = 'Dicts with same items with different order are the same.'
assert([{'a': 1, 'b': 2}, {'b': 2, 'a': 1}].count({'a': 1, 'b': 2}) == 2)

chaos_list = [
	1,
	type, // Function
	false,
	[8, 9],
	true,
	true,
	{'a': 1},
	{'b': 2, 'a': 1},
	{'a': 1, 'b': 2}, // Switched order but same data -> dicts equal.
]
assert(chaos_list.count(1) == 3) // 1 equals to true, too.
assert(chaos_list.count(2) == 0)
assert(chaos_list.count(false) == 1)
assert(chaos_list.count(true) == 3) // true equals to 1, too.
assert(chaos_list.count(null) == 0)
assert(chaos_list.count({'a': 1}) == 1)
assert(chaos_list.count({'b': 2, 'a': 1}) == 2)
assert(chaos_list.count({'a': 2, 'b': 1}) == 0)
assert(chaos_list.count({'a': 2, 'b': 1, 'c': 3}) == 0)
assert(chaos_list.count(type) == 1)
assert(chaos_list.count(len) == 0)

//
// list_shuffle()
//

shuffled = [1, 'a', true].shuffle()
for (item in shuffled) {
	assert(item == 1 or item == 'a' or item == true)
}

//
// list_map()
//

assert([-1, 0, 2].map(to_bool) == [true, false, true])
assert([len, type, 1, true].map(type) == ['function', 'function', 'number', 'bool'])

//
// list_contains()
//

assert([1, 2, 3, 1].contains(1) == true)
assert([1, 2, 3, 1].contains(666) == false)

// NOTE: Lists with same items with different order are different.
assert([[1, 2], 'xxx'].contains([1, 2]) == true)
assert([[1, 2], 'xxx'].contains([2, 1]) == false)

// NOTE: Dicts with same items with different order are the same.
assert([{'b': 2, 'a': 1}, 'xxx'].contains({'a': 1, 'b': 2}) == true)
