//
// Types of different values.
//

result = type(null)
assert(result == "null")

result = type(true)
assert(result == "bool")

result = type(false)
assert(result == "bool")

result = type(1)
assert(result == "number")

result = type(-1)
assert(result == "number")

result = type(0.123)
assert(result == "number")

result = type("")
assert(result == "string")

result = type("ahoj")
assert(result == "string")

result = type(rx"ahoj")
assert(result == "regex")

result = type(rx"a[ho]j")
assert(result == "regex")

result = type(rx"")
assert(result == "regex")

result = type(type)
assert(result == "function")

result = type([])
assert(result == "list")

result = type([1,2,'c'])
assert(result == "list")

result = type({})
assert(result == "dict")

result = type({1: 'a', 2: 'b', 'c': 'd'})
assert(result == "dict")

//
// Casting numbers.
//

result = 1.to_number()
assert(result == 1)

result = 1.to_string()
assert(result == "1")

result = 1.to_bool()
assert(result == true)

//
// Casting strings.
//

error = 0
try {
	result = "a".to_number()
} catch {
	error = 1
}
assert(error == 1)

result = "a".to_string()
assert(result == "a")

result = "a".to_bool()
assert(result == true)

result = "a".to_regex()
assert(result == rx"a")

//
// Casting bools.
//

// Casting true

result = true.to_number()
assert(result == 1)

result = true.to_string()
assert(result == "true")

result = true.to_bool()
assert(result == true)

// Casting false

result = false.to_number()
assert(result == 0)

result = false.to_string()
assert(result == "false")

result = false.to_bool()
assert(result == false)

//
// Casting lists.
//

result = ["a"].to_bool()
assert(result == true)

result = [].to_bool()
assert(result == false)

result = "ab c".to_list()
assert(result == ["a", "b", " ", "c"])

//
// Casting regexes.
//

result = rx"a".to_string()
assert(result == "a")

result = rx"a".to_regex()
assert(result == rx"a")

//
// Examples of invalid casts.
//

function true_if_error(fn) {

	try {
		fn()
		success = true
	} catch {
		success = false
	}

	return !success

}

assert(true_if_error(() => {
	x_number_to_list = 1.to_list()
}))

assert(true_if_error(() => {
	x_bool_true_to_list = true.to_list()
}))

assert(true_if_error(() => {
	x_bool_true_to_regex = true.to_regex()
}))

assert(true_if_error(() => {
	x_bool_false_to_list = false.to_list()
}))

assert(true_if_error(() => {
	x_bool_false_to_regex = false.to_regex()
}))

assert(true_if_error(() => {
	x_list_to_number = ["a"].to_number()
}))

assert(true_if_error(() => {
	x_list_to_regex = ["a"].to_regex()
}))

assert(true_if_error(() => {
	x_regex_to_number = rx"a".to_number()
}))

assert(true_if_error(() => {
	x_regex_to_list = rx"a".to_list()
}))

