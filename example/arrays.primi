// No semicolons anywhere!

dummy_array = [
	1: "abc", 3: "xyz", "a", "abc": "ohh yeah", 2: "bbb", 789: "xyz", "nokey",
	"kokot": "ohh yeah"]
text = ''
for (str in dummy_array) {
	text = text + str + "..."
}
assert(
	text == "abc...xyz...a...ohh yeah...bbb...xyz...nokey...ohh yeah...",
	'String collected using array iteration.'
)

// Note: Some letters are uppercased.
new_array = ['a', 'b', 'c', 'd', 'E', 'F', 'G', 'h', 'c', 'b', 'A']

// Changing value at index.
	assert(new_array.length() == 11)

	new_array[3] = 'capital D'

	assert(new_array.length() == 11, 'Array length size stays the same after changing value for existing key')
	assert(new_array[0] == 'a')
	assert(new_array[1] == 'b')
	assert(new_array[2] == 'c')
	assert(new_array[3] == 'capital D', 'Value for specific existing key has been changed')
	assert(new_array[4] == 'E')

// Adding values without specifying index.
	dummy_array = ['a', 3: 'b']
	dummy_array[] = 'whoa!'
	assert(dummy_array[4] == 'whoa!')

// Nested arrays
	nested = ['outer': ['inner': []]]
	nested[] = 'xxx'
	nested['outer'][] = 'yyy'
	nested['outer']['inner'][] = 'zzz'

	assert(nested['outer']['inner'][0] == 'zzz')
	assert(nested == ['outer': ['inner': ['zzz'], 'yyy'], 'xxx'])

// Function: array_pop()
	assert(new_array.length() == 11)

	return_value = new_array.pop()

	assert(return_value == 'A', 'Popping returns popped value')
	assert(new_array.length() == 10, 'Popping reduces size of the array')
	assert(new_array.pop() == 'b', 'Popping continues with another item')
	assert(new_array.length() == 9, 'Popping still reduces size of the array')

// Function: array_push()
	assert(new_array.length() == 9)

	return_value = new_array.push('new item A')

	assert(return_value == null, 'Pushing always returns null')
	assert(new_array.length() == 10, 'Pushing increases size of the array')
	assert(new_array.pop() == 'new item A', 'Popping after pushing returns back the previously pushed value')
	assert(new_array.length() == 9, 'Popping after pushing reduces size of the array back to pre-push era')
